#pragma once

#include <list>
#include <map>
#include <memory>
#include <rapidjson/document.h>
#include <rapidjson/prettywriter.h>
#include <rapidjson/writer.h>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#if __cplusplus >= 201703L
#include <optional>
#include <string_view>

#endif
namespace xl {

namespace json {

enum WriteFlags {
  WRITE_FLAG_NONE = 0,
  WRITE_FLAG_PRETTY = 1 << 0,
  WRITE_FLAG_WRITE_NULL_VALUES = 1 << 1,
};

} // namespace json

template <typename T>
struct JsonAccessor : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<T>> {
  static bool Read(T &ref, const ::rapidjson::Value &json_value) {
    return ref.json_read(json_value);
  }
  static bool WillWrite(const T &ref, unsigned int flags) {
    return true;
  }
  static void Write(const T &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    ref.json_write(writer, flags);
  }
  static void
  WritePretty(const T &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    ref.json_write_pretty(writer, flags);
  }
};

template <>
class JsonAccessor<bool> : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<bool>> {
public:
  static bool Read(bool &ref, const ::rapidjson::Value &json_value) {
    if (!json_value.IsBool()) {
      return false;
    }
    ref = json_value.GetBool();
    return true;
  }
  static bool WillWrite(const bool &ref, unsigned int flags) {
    return true;
  }
  static void Write(const bool &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    writer.Bool(ref);
  }
  static void
  WritePretty(const bool &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    writer.Bool(ref);
  }
};

#define JSON_ACCESSOR_NUMBER(type, write_type)                                                                         \
  template <>                                                                                                          \
  class JsonAccessor<type> : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<type>> {          \
  public:                                                                                                              \
    static bool Read(type &ref, const ::rapidjson::Value &json_value) {                                                \
      if (!json_value.IsNumber()) {                                                                                    \
        return false;                                                                                                  \
      }                                                                                                                \
      if (json_value.IsInt()) {                                                                                        \
        ref = (type)json_value.GetInt();                                                                               \
      } else if (json_value.IsUint()) {                                                                                \
        ref = (type)json_value.GetUint();                                                                              \
      } else if (json_value.IsInt64()) {                                                                               \
        ref = (type)json_value.GetInt64();                                                                             \
      } else if (json_value.IsUint64()) {                                                                              \
        ref = (type)json_value.GetUint64();                                                                            \
      } else if (json_value.IsFloat()) {                                                                               \
        ref = (type)json_value.GetFloat();                                                                             \
      } else if (json_value.IsDouble()) {                                                                              \
        ref = (type)json_value.GetDouble();                                                                            \
      } else {                                                                                                         \
        return false;                                                                                                  \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const type &ref, unsigned int flags) {                                                       \
      return true;                                                                                                     \
    }                                                                                                                  \
    static void Write(const type &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      writer.write_type(ref);                                                                                          \
    }                                                                                                                  \
    static void                                                                                                        \
    WritePretty(const type &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      writer.write_type(ref);                                                                                          \
    }                                                                                                                  \
  }

JSON_ACCESSOR_NUMBER(char, Int);
JSON_ACCESSOR_NUMBER(unsigned char, Uint);
JSON_ACCESSOR_NUMBER(short, Int);
JSON_ACCESSOR_NUMBER(unsigned short, Uint);
JSON_ACCESSOR_NUMBER(int, Int);
JSON_ACCESSOR_NUMBER(unsigned int, Uint);
JSON_ACCESSOR_NUMBER(long, Int);
JSON_ACCESSOR_NUMBER(unsigned long, Uint);
JSON_ACCESSOR_NUMBER(long long, Int64);
JSON_ACCESSOR_NUMBER(unsigned long long, Uint64);
JSON_ACCESSOR_NUMBER(float, Double);
JSON_ACCESSOR_NUMBER(double, Double);

template <>
class JsonAccessor<std::string>
    : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<std::string>> {
public:
  static bool Read(std::string &ref, const ::rapidjson::Value &json_value) {
    if (!json_value.IsString()) {
      return false;
    }
    ref.assign(json_value.GetString(), json_value.GetStringLength());
    return true;
  }
  static bool WillWrite(const std::string &ref, unsigned int flags) {
    return true;
  }
  static void
  Write(const std::string &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    writer.String(ref.c_str(), (::rapidjson::SizeType)ref.size(), false);
  }
  static void WritePretty(const std::string &ref,
                          ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer,
                          unsigned int flags) {
    writer.String(ref.c_str(), (::rapidjson::SizeType)ref.size(), false);
  }
};

#if __cplusplus >= 201703L
template <>
class JsonAccessor<std::string_view>
    : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<std::string_view>> {
public:
  static bool Read(std::string_view &ref, const ::rapidjson::Value &json_value) {
    if (!json_value.IsString()) {
      return false;
    }
    ref = {json_value.GetString(), json_value.GetStringLength()};
    return true;
  }
  static bool WillWrite(const std::string_view &ref, unsigned int flags) {
    return true;
  }
  static void
  Write(const std::string_view &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    writer.String(ref.data(), (::rapidjson::SizeType)ref.length(), false);
  }
  static void WritePretty(const std::string_view &ref,
                          ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer,
                          unsigned int flags) {
    writer.String(ref.data(), (::rapidjson::SizeType)ref.length(), false);
  }
};
#endif

#define JSON_ACCESSOR_POINTER(pointer)                                                                                 \
  template <typename T>                                                                                                \
  class JsonAccessor<pointer<T>>                                                                                       \
      : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<pointer<T>>> {                         \
  public:                                                                                                              \
    static bool Read(pointer<T> &ref, const ::rapidjson::Value &json_value) {                                          \
      if (json_value.IsNull()) {                                                                                       \
        ref.reset();                                                                                                   \
        return true;                                                                                                   \
      }                                                                                                                \
      ref = pointer<T>(new T());                                                                                       \
      return JsonAccessor<T>::Read(*ref, json_value);                                                                  \
    }                                                                                                                  \
    static bool WillWrite(const pointer<T> &ref, unsigned int flags) {                                                 \
      return (flags & json::WRITE_FLAG_WRITE_NULL_VALUES) != 0 ||                                                      \
             (ref != nullptr && JsonAccessor<T>::WillWrite(*ref, flags));                                              \
    }                                                                                                                  \
    static void                                                                                                        \
    Write(const pointer<T> &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {         \
      if (ref == nullptr) {                                                                                            \
        writer.Null();                                                                                                 \
      } else {                                                                                                         \
        return JsonAccessor<T>::Write(*ref, writer, flags);                                                            \
      }                                                                                                                \
    }                                                                                                                  \
    static void WritePretty(const pointer<T> &ref,                                                                     \
                            ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer,                              \
                            unsigned int flags) {                                                                      \
      if (ref == nullptr) {                                                                                            \
        writer.Null();                                                                                                 \
      } else {                                                                                                         \
        return JsonAccessor<T>::WritePretty(*ref, writer, flags);                                                      \
      }                                                                                                                \
    }                                                                                                                  \
  }

JSON_ACCESSOR_POINTER(std::unique_ptr);
JSON_ACCESSOR_POINTER(std::shared_ptr);

#if __cplusplus >= 201703L

template <typename T>
class JsonAccessor<std::optional<T>>
    : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<std::optional<T>>> {
public:
  static bool Read(std::optional<T> &ref, const ::rapidjson::Value &json_value) {
    if (json_value.IsNull()) {
      ref.reset();
      return true;
    }
    ref = T();
    return JsonAccessor<T>::Read(ref.value(), json_value);
  }
  static bool WillWrite(const std::optional<T> &ref, unsigned int flags) {
    return (flags & json::WRITE_FLAG_WRITE_NULL_VALUES) != 0 ||
           (ref.has_value() && JsonAccessor<T>::WillWrite(ref.value(), flags));
  }
  static void
  Write(const std::optional<T> &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {
    if (!ref.has_value()) {
      writer.Null();
    } else {
      return JsonAccessor<T>::Write(ref.value(), writer, flags);
    }
  }
  static void WritePretty(const std::optional<T> &ref,
                          ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer,
                          unsigned int flags) {
    if (!ref.has_value()) {
      writer.Null();
    } else {
      return JsonAccessor<T>::WritePretty(ref.value(), writer, flags);
    }
  }
};

#endif

#define JSON_ACCESSOR_CONTAINER(container)                                                                             \
  template <typename T>                                                                                                \
  class JsonAccessor<container<T>>                                                                                     \
      : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<container<T>>> {                       \
  public:                                                                                                              \
    static bool Read(container<T> &ref, const ::rapidjson::Value &json_value) {                                        \
      if (!json_value.IsArray()) {                                                                                     \
        return false;                                                                                                  \
      }                                                                                                                \
      auto it = ref.begin();                                                                                           \
      for (::rapidjson::SizeType i = 0; i < json_value.Size(); ++i) {                                                  \
        T t;                                                                                                           \
        if (!JsonAccessor<T>::Read(t, json_value[i])) {                                                                \
          return false;                                                                                                \
        }                                                                                                              \
        ref.insert(ref.end(), std::move(t));                                                                           \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const container<T> &ref, unsigned int flags) {                                               \
      return true;                                                                                                     \
    }                                                                                                                  \
    static void                                                                                                        \
    Write(const container<T> &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {       \
      writer.StartArray();                                                                                             \
      for (const T &item : ref) {                                                                                      \
        JsonAccessor<T>::Write(item, writer, flags);                                                                   \
      }                                                                                                                \
      writer.EndArray(rapidjson::SizeType(ref.size()));                                                                \
    }                                                                                                                  \
    static void WritePretty(const container<T> &ref,                                                                   \
                            ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer,                              \
                            unsigned int flags) {                                                                      \
      writer.StartArray();                                                                                             \
      for (const T &item : ref) {                                                                                      \
        JsonAccessor<T>::WritePretty(item, writer, flags);                                                             \
      }                                                                                                                \
      writer.EndArray(rapidjson::SizeType(ref.size()));                                                                \
    }                                                                                                                  \
  }

JSON_ACCESSOR_CONTAINER(std::vector);
JSON_ACCESSOR_CONTAINER(std::list);
JSON_ACCESSOR_CONTAINER(std::set);
JSON_ACCESSOR_CONTAINER(std::unordered_set);

#define JSON_ACCESSOR_MAP(map)                                                                                         \
  template <typename T>                                                                                                \
  class JsonAccessor<map<std::string, T>>                                                                              \
      : public ::rapidjson::BaseReaderHandler<::rapidjson::UTF8<>, JsonAccessor<map<std::string, T>>> {                \
  public:                                                                                                              \
    static bool Read(map<std::string, T> &ref, const ::rapidjson::Value &json_value) {                                 \
      if (!json_value.IsObject()) {                                                                                    \
        return false;                                                                                                  \
      }                                                                                                                \
      for (auto it = json_value.MemberBegin(); it != json_value.MemberEnd(); ++it) {                                   \
        T t;                                                                                                           \
        if (!JsonAccessor<T>::Read(t, it->value)) {                                                                    \
          return false;                                                                                                \
        }                                                                                                              \
        ref[std::string(it->name.GetString(), it->name.GetStringLength())] = std::move(t);                             \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const map<std::string, T> &ref, unsigned int flags) {                                        \
      return true;                                                                                                     \
    }                                                                                                                  \
    static void Write(const map<std::string, T> &ref,                                                                  \
                      ::rapidjson::Writer<::rapidjson::StringBuffer> &writer,                                          \
                      unsigned int flags) {                                                                            \
      writer.StartObject();                                                                                            \
      for (const auto &item : ref) {                                                                                   \
        if (!JsonAccessor<T>::WillWrite(item.second, flags)) {                                                         \
          continue;                                                                                                    \
        }                                                                                                              \
        writer.Key(item.first.c_str(), ::rapidjson::SizeType(item.first.length()));                                    \
        JsonAccessor<T>::Write(item.second, writer, flags);                                                            \
      }                                                                                                                \
      writer.EndObject(rapidjson::SizeType(ref.size()));                                                               \
    }                                                                                                                  \
    static void WritePretty(const map<std::string, T> &ref,                                                            \
                            ::rapidjson::PrettyWriter<rapidjson::StringBuffer> &writer,                                \
                            unsigned int flags) {                                                                      \
      writer.StartObject();                                                                                            \
      for (const auto &item : ref) {                                                                                   \
        if (!JsonAccessor<T>::WillWrite(item.second, flags)) {                                                         \
          continue;                                                                                                    \
        }                                                                                                              \
        writer.Key(item.first.c_str(), rapidjson::SizeType(item.first.length()));                                      \
        JsonAccessor<T>::WritePretty(item.second, writer, flags);                                                      \
      }                                                                                                                \
      writer.EndObject(rapidjson::SizeType(ref.size()));                                                               \
    }                                                                                                                  \
  }

JSON_ACCESSOR_MAP(std::map);
JSON_ACCESSOR_MAP(std::unordered_map);

} // namespace xl

#define XL_JSON_BEGIN(struct_type)                                                                                     \
  struct struct_type {                                                                                                 \
  private:                                                                                                             \
    template <typename T, size_t Index>                                                                                \
    struct FieldJsonAccessorT;                                                                                         \
    typedef struct_type Type;                                                                                          \
    static const size_t SEQUENCE = __COUNTER__;                                                                        \
                                                                                                                       \
  public:                                                                                                              \
    template <size_t Index>                                                                                            \
    using FieldJsonAccessor = FieldJsonAccessorT<struct_type, Index>;

#define XL_JSON_MEMBER(field_type, field_name)                                                                         \
public:                                                                                                                \
  field_type field_name;                                                                                               \
                                                                                                                       \
private:                                                                                                               \
  template <typename T>                                                                                                \
  struct FieldJsonAccessorT<T, __COUNTER__ - SEQUENCE - 1> {                                                           \
    static bool Read(Type &ref, const ::rapidjson::Value &json_value) {                                                \
      if (json_value.HasMember(#field_name)) {                                                                         \
        return ::xl::JsonAccessor<field_type>::Read(ref.field_name, json_value[#field_name]);                          \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      return ::xl::JsonAccessor<field_type>::WillWrite(ref.field_name, flags);                                         \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      if (!WillWrite(ref, flags)) {                                                                                    \
        return;                                                                                                        \
      }                                                                                                                \
      writer.Key(#field_name, rapidjson::SizeType(strlen(#field_name)), false);                                        \
      ::xl::JsonAccessor<field_type>::Write(ref.field_name, writer, flags);                                            \
    }                                                                                                                  \
    static void                                                                                                        \
    WritePretty(const Type &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      if (!WillWrite(ref, flags)) {                                                                                    \
        return;                                                                                                        \
      }                                                                                                                \
      writer.Key(#field_name, rapidjson::SizeType(strlen(#field_name)), false);                                        \
      ::xl::JsonAccessor<field_type>::WritePretty(ref.field_name, writer, flags);                                      \
    }                                                                                                                  \
  };

#define XL_JSON_END()                                                                                                  \
private:                                                                                                               \
  static const size_t FIELDS = __COUNTER__ - SEQUENCE - 1;                                                             \
  template <size_t Begin, size_t End>                                                                                  \
  struct FieldsJsonAccessorWalker {                                                                                    \
    static bool Read(Type &ref, const ::rapidjson::Value &json_value) {                                                \
      if (!json_value.IsObject()) {                                                                                    \
        return false;                                                                                                  \
      }                                                                                                                \
      if (!FieldJsonAccessor<Begin>::Read(ref, json_value)) {                                                          \
        return false;                                                                                                  \
      }                                                                                                                \
      if (!FieldsJsonAccessorWalker<Begin + 1, End>::Read(ref, json_value)) {                                          \
        return false;                                                                                                  \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      if (FieldJsonAccessor<Begin>::WillWrite(ref, flags)) {                                                           \
        return true;                                                                                                   \
      }                                                                                                                \
      return FieldsJsonAccessorWalker<Begin + 1, End>::WillWrite(ref, flags);                                          \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      FieldJsonAccessor<Begin>::Write(ref, writer, flags);                                                             \
      FieldsJsonAccessorWalker<Begin + 1, End>::Write(ref, writer, flags);                                             \
    }                                                                                                                  \
    static void                                                                                                        \
    WritePretty(const Type &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
      FieldJsonAccessor<Begin>::WritePretty(ref, writer, flags);                                                       \
      FieldsJsonAccessorWalker<Begin + 1, End>::WritePretty(ref, writer, flags);                                       \
    }                                                                                                                  \
  };                                                                                                                   \
  template <size_t Index>                                                                                              \
  struct FieldsJsonAccessorWalker<Index, Index> {                                                                      \
    static bool Read(Type &ref, const ::rapidjson::Value &json_value) {                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      return false;                                                                                                    \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
    }                                                                                                                  \
    static void                                                                                                        \
    WritePretty(const Type &ref, ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) {   \
    }                                                                                                                  \
  };                                                                                                                   \
                                                                                                                       \
private:                                                                                                               \
  friend ::xl::JsonAccessor<Type>;                                                                                     \
  bool json_read(const ::rapidjson::Value &json_value) {                                                               \
    return FieldsJsonAccessorWalker<0, FIELDS>::Read(*this, json_value);                                               \
  }                                                                                                                    \
  bool json_will_write(unsigned int flags) const {                                                                     \
    return FieldsJsonAccessorWalker<0, FIELDS>::WillWrite(*this, flags);                                               \
  }                                                                                                                    \
  void json_write(::rapidjson::Writer<::rapidjson::StringBuffer> &writer, unsigned int flags) const {                  \
    writer.StartObject();                                                                                              \
    FieldsJsonAccessorWalker<0, FIELDS>::Write(*this, writer, flags);                                                  \
    writer.EndObject(FIELDS);                                                                                          \
  }                                                                                                                    \
  void json_write_pretty(::rapidjson::PrettyWriter<::rapidjson::StringBuffer> &writer, unsigned int flags) const {     \
    writer.StartObject();                                                                                              \
    FieldsJsonAccessorWalker<0, FIELDS>::WritePretty(*this, writer, flags);                                            \
    writer.EndObject(FIELDS);                                                                                          \
  }                                                                                                                    \
                                                                                                                       \
public:                                                                                                                \
  bool json_parse(const char *json_string) {                                                                           \
    ::rapidjson::Document doc;                                                                                         \
    doc.Parse<::rapidjson::kParseFullPrecisionFlag | ::rapidjson::kParseCommentsFlag |                                 \
              ::rapidjson::kParseTrailingCommasFlag>(json_string);                                                     \
    if (doc.HasParseError()) {                                                                                         \
      return false;                                                                                                    \
    }                                                                                                                  \
    if (!json_read(doc)) {                                                                                             \
      return false;                                                                                                    \
    }                                                                                                                  \
    return true;                                                                                                       \
  }                                                                                                                    \
  std::string json_dump(unsigned int flags = ::xl::json::WRITE_FLAG_NONE) {                                            \
    ::rapidjson::StringBuffer sb;                                                                                      \
    if ((flags & ::xl::json::WRITE_FLAG_PRETTY) != 0) {                                                                \
      flags &= ~::xl::json::WRITE_FLAG_PRETTY;                                                                         \
      ::rapidjson::PrettyWriter<::rapidjson::StringBuffer> writer(sb);                                                 \
      json_write_pretty(writer, flags);                                                                                \
    } else {                                                                                                           \
      ::rapidjson::Writer<::rapidjson::StringBuffer> writer(sb);                                                       \
      json_write(writer, flags);                                                                                       \
    }                                                                                                                  \
    return sb.GetString();                                                                                             \
  }                                                                                                                    \
  }                                                                                                                    \
  ;
