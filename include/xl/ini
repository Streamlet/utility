// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "native_string"
#include <list>
#include <map>
#include <string>
#include <vector>

namespace xl {

class ini {
public:
  struct ini_line {
    std::string key;
    std::string value;
    std::string comment;
  };
  struct ini_section {
    std::string name;
    std::string comment;
    std::list<ini_line> lines;
    std::map<std::string, std::list<ini_line>::iterator> line_map;
  };
  struct ini_data {
    std::list<ini_section> sections;
    std::map<std::string, std::list<ini_section>::iterator> section_map;
  };

public:
  bool load(const TCHAR *path);
  bool save(const TCHAR *path) const;

  bool parse(const std::string &content);
  std::string dump() const;

  const ini_data &data() const;

  std::vector<std::string> enum_sections() const;
  bool has_section(const std::string &section) const;
  bool add_section(const std::string &section, const std::string &comment = "", bool save = true);
  bool remove_section(const std::string &section, bool save = true);

  std::vector<std::string> enum_keys(const std::string &section) const;
  bool has_key(const std::string &section, const std::string &key) const;
  std::string get_value(const std::string &section, const std::string &key) const;
  bool set_value(const std::string &section,
                 const std::string &key,
                 const std::string &value,
                 const std::string &comment = "",
                 bool save = true);
  bool remove_value(const std::string &section, const std::string &key, bool save = true);

private:
  native_string path_;
  ini_data data_;
};

} // namespace xl
