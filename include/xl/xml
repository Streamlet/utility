#pragma once

#include <list>
#include <set>
#include <string>
#include <unordered_set>
#if __cplusplus >= 201703L
#include <optional>
#include <string_view>
#endif

#include <rapidxml.hpp>

/* Adding declarations to make it compatible with gcc 4.7 and greater */
namespace rapidxml {
namespace internal {
  
template <class OutIt, class Ch>
inline OutIt print_children(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_attributes(OutIt out, const xml_node<Ch> *node, int flags);

template <class OutIt, class Ch>
inline OutIt print_data_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_cdata_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_element_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_declaration_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_comment_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_doctype_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_pi_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

} // namespace internal
} // namespace rapidxml

#include <rapidxml_print.hpp>

namespace xl {

namespace xml {

enum WriteFlags {
  WRITE_FLAG_NONE = 0,
  WRITE_FLAG_PRETTY = 1 << 0,
  WRITE_FLAG_WRITE_EMPTY_VALUES = 1 << 1,
};

} // namespace xml

template <typename T>
struct XmlAccessor {
  static bool Read(T &ref, const ::rapidxml::xml_node<> &xml_node) {
    return ref.xml_read(xml_node);
  }
  static bool WillWrite(const T &ref, unsigned int flags) {
    return true;
  }
  static void Write(const T &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    ref.xml_write(xml_node, flags);
  }
};

template <>
class XmlAccessor<std::string> {
public:
  static bool Read(std::string &ref, const ::rapidxml::xml_node<> &xml_node) {
    ref.assign(xml_node.value(), xml_node.value_size());
    return true;
  }
  static bool Read(std::string &ref, const ::rapidxml::xml_attribute<> &xml_attribute) {
    ref.assign(xml_attribute.value(), xml_attribute.value_size());
    return true;
  }
  static bool WillWrite(const std::string &ref, unsigned int flags) {
    return true;
  }
  static void Write(const std::string &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    xml_node.value(ref.c_str(), ref.length());
  }
  static void Write(const std::string &ref, ::rapidxml::xml_attribute<> &xml_attribute, unsigned int flags) {
    xml_attribute.value(ref.c_str(), ref.length());
  }
};

#if __cplusplus >= 201703L
template <>
class XmlAccessor<std::string_view> {
public:
  static bool Read(std::string_view &ref, const ::rapidxml::xml_node<> &xml_node) {
    ref = {xml_node.value(), xml_node.value_size()};
    return true;
  }
  static bool Read(std::string_view &ref, const ::rapidxml::xml_attribute<> &xml_attribute) {
    ref = {xml_attribute.value(), xml_attribute.value_size()};
    return true;
  }
  static bool WillWrite(const std::string_view &ref, unsigned int flags) {
    return true;
  }
  static void Write(const std::string_view &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    xml_node.value(ref.data(), ref.length());
  }
  static void Write(const std::string_view &ref, ::rapidxml::xml_attribute<> &xml_attribute, unsigned int flags) {
    xml_attribute.value(ref.data(), ref.length());
  }
};
#endif

#define XML_ACCESSOR_CONTAINER(container)                                                                              \
  template <typename T>                                                                                                \
  class XmlAccessor<container<T>> {                                                                                    \
  public:                                                                                                              \
    static bool Read(container<T> &ref, const ::rapidxml::xml_node<> &xml_node) {                                      \
      for (const ::rapidxml::xml_node<> *p = &xml_node; p != nullptr;                                                  \
           p = p->next_sibling(xml_node.name(), xml_node.name_size())) {                                               \
        T t;                                                                                                           \
        if (!XmlAccessor<T>::Read(t, *p)) {                                                                            \
          return false;                                                                                                \
        }                                                                                                              \
        ref.insert(ref.end(), std::move(t));                                                                           \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const container<T> &ref, unsigned int flags) {                                               \
      return true;                                                                                                     \
    }                                                                                                                  \
    static void Write(const container<T> &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {                 \
      ::rapidxml::xml_node<> *parent = xml_node.parent();                                                              \
      if (parent == nullptr) {                                                                                         \
        return;                                                                                                        \
      }                                                                                                                \
      bool written_first = false;                                                                                      \
      for (const T &item : ref) {                                                                                      \
        if (!written_first) {                                                                                          \
          XmlAccessor<T>::Write(item, xml_node, flags);                                                                \
          written_first = true;                                                                                        \
        } else {                                                                                                       \
          ::rapidxml::xml_node<> *new_node = xml_node.document()->allocate_node(                                       \
              ::rapidxml::node_element, xml_node.name(), nullptr, xml_node.name_size());                               \
          parent->append_node(new_node);                                                                               \
          XmlAccessor<T>::Write(item, *new_node, flags);                                                               \
        }                                                                                                              \
      }                                                                                                                \
    }                                                                                                                  \
  }

XML_ACCESSOR_CONTAINER(std::vector);
XML_ACCESSOR_CONTAINER(std::list);
XML_ACCESSOR_CONTAINER(std::set);
XML_ACCESSOR_CONTAINER(std::unordered_set);

} // namespace xl

#define XL_XML_BEGIN(struct_type)                                                                                      \
  struct struct_type {                                                                                                 \
  private:                                                                                                             \
    template <typename T, size_t Index>                                                                                \
    struct FieldXmlAccessorT;                                                                                          \
    typedef struct_type Type;                                                                                          \
    static const size_t SEQUENCE = __COUNTER__;                                                                        \
                                                                                                                       \
  public:                                                                                                              \
    template <size_t Index>                                                                                            \
    using FieldXmlAccessor = FieldXmlAccessorT<struct_type, Index>;

#define XL_XML_MEMBER_NODE(field_type, field_name)                                                                     \
public:                                                                                                                \
  field_type field_name;                                                                                               \
                                                                                                                       \
private:                                                                                                               \
  template <typename T>                                                                                                \
  struct FieldXmlAccessorT<T, __COUNTER__ - SEQUENCE - 1> {                                                            \
    static bool Read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      const ::rapidxml::xml_node<> *xml_node = parent.first_node(#field_name);                                         \
      if (xml_node != nullptr) {                                                                                       \
        return ::xl::XmlAccessor<field_type>::Read(ref.field_name, *xml_node);                                         \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      return ::xl::XmlAccessor<field_type>::WillWrite(ref.field_name, flags);                                          \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      if (!WillWrite(ref, flags)) {                                                                                    \
        return;                                                                                                        \
      }                                                                                                                \
      ::rapidxml::xml_node<> *xml_node = parent.document()->allocate_node(::rapidxml::node_element, #field_name);      \
      parent.append_node(xml_node);                                                                                    \
      ::xl::XmlAccessor<field_type>::Write(ref.field_name, *xml_node, flags);                                          \
    }                                                                                                                  \
  };

#define XL_XML_MEMBER_ATTR(field_type, field_name)                                                                     \
public:                                                                                                                \
  field_type field_name;                                                                                               \
                                                                                                                       \
private:                                                                                                               \
  template <typename T>                                                                                                \
  struct FieldXmlAccessorT<T, __COUNTER__ - SEQUENCE - 1> {                                                            \
    static bool Read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      const ::rapidxml::xml_attribute<> *xml_attribute = parent.first_attribute(#field_name);                          \
      if (xml_attribute != nullptr) {                                                                                  \
        return ::xl::XmlAccessor<field_type>::Read(ref.field_name, *xml_attribute);                                    \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      return ::xl::XmlAccessor<field_type>::WillWrite(ref.field_name, flags);                                          \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      if (!WillWrite(ref, flags)) {                                                                                    \
        return;                                                                                                        \
      }                                                                                                                \
      ::rapidxml::xml_attribute<> *xml_attribute = parent.document()->allocate_attribute(#field_name);                 \
      parent.append_attribute(xml_attribute);                                                                          \
      ::xl::XmlAccessor<field_type>::Write(ref.field_name, *xml_attribute, flags);                                     \
    }                                                                                                                  \
  };

#define XL_XML_END()                                                                                                   \
private:                                                                                                               \
  static const size_t FIELDS = __COUNTER__ - SEQUENCE - 1;                                                             \
  template <size_t Begin, size_t End>                                                                                  \
  struct FieldsXmlAccessorWalker {                                                                                     \
    static bool Read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      if (!FieldXmlAccessor<Begin>::Read(ref, parent)) {                                                               \
        return false;                                                                                                  \
      }                                                                                                                \
      if (!FieldsXmlAccessorWalker<Begin + 1, End>::Read(ref, parent)) {                                               \
        return false;                                                                                                  \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      if (FieldXmlAccessor<Begin>::WillWrite(ref, flags)) {                                                            \
        return true;                                                                                                   \
      }                                                                                                                \
      return FieldsXmlAccessorWalker<Begin + 1, End>::WillWrite(ref, flags);                                           \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      FieldXmlAccessor<Begin>::Write(ref, parent, flags);                                                              \
      FieldsXmlAccessorWalker<Begin + 1, End>::Write(ref, parent, flags);                                              \
    }                                                                                                                  \
  };                                                                                                                   \
  template <size_t Index>                                                                                              \
  struct FieldsXmlAccessorWalker<Index, Index> {                                                                       \
    static bool Read(Type &ref, const ::rapidxml::xml_node<> &xml_node) {                                              \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool WillWrite(const Type &ref, unsigned int flags) {                                                       \
      return false;                                                                                                    \
    }                                                                                                                  \
    static void Write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
    }                                                                                                                  \
  };                                                                                                                   \
                                                                                                                       \
private:                                                                                                               \
  friend ::xl::XmlAccessor<Type>;                                                                                      \
  bool xml_read(const ::rapidxml::xml_node<> &xml_node) {                                                              \
    return FieldsXmlAccessorWalker<0, FIELDS>::Read(*this, xml_node);                                                  \
  }                                                                                                                    \
  bool xml_will_write(unsigned int flags) const {                                                                      \
    return FieldsXmlAccessorWalker<0, FIELDS>::WillWrite(*this, flags);                                                \
  }                                                                                                                    \
  void xml_write(::rapidxml::xml_node<> &parent, unsigned int flags) const {                                           \
    FieldsXmlAccessorWalker<0, FIELDS>::Write(*this, parent, flags);                                                   \
  }                                                                                                                    \
                                                                                                                       \
public:                                                                                                                \
  bool xml_parse(const char *xml_string, const char *root_name) {                                                      \
    ::rapidxml::xml_document<> xml_document;                                                                           \
    try {                                                                                                              \
      xml_document.parse<::rapidxml::parse_non_destructive>((char *)xml_string);                                       \
    } catch (::rapidxml::parse_error &) {                                                                              \
      return false;                                                                                                    \
    }                                                                                                                  \
    ::rapidxml::xml_node<> *root = xml_document.first_node(root_name);                                                 \
    if (root == nullptr || !xml_read(*root)) {                                                                         \
      return false;                                                                                                    \
    }                                                                                                                  \
    return true;                                                                                                       \
  }                                                                                                                    \
  std::string xml_dump(const char *root_name, unsigned int flags = ::xl::xml::WRITE_FLAG_NONE) {                       \
    ::rapidxml::xml_document<> xml_document;                                                                           \
    ::rapidxml::xml_node<> *root = xml_document.allocate_node(::rapidxml::node_element, root_name);                    \
    xml_document.append_node(root);                                                                                    \
    xml_write(*root, flags);                                                                                           \
    std::string xml_string;                                                                                            \
    ::rapidxml::print(std::back_inserter(xml_string), xml_document,                                                    \
                      (flags & ::xl::xml::WRITE_FLAG_PRETTY) == 0 ? ::rapidxml::print_no_indenting : 0);               \
    return std::move(xml_string);                                                                                      \
  }                                                                                                                    \
  }                                                                                                                    \
  ;
