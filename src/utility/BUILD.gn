declare_args() {
  # On Windows, the default implement is WinHTTP, then cURL
  # On Posix, the default and only implement is cURL
  winhttp = true
}

source_set("utility") {
  configs += [ "//build_config:project_common" ]
  defines = []
  sources = [
    "crypto.cc",
    "crypto.h",
    "http_client.cc",
    "http_client.h",
    "system_util.h",
    "url.cc",
    "url.h",
  ]
  deps = [ "//thirdparty:crypto" ]
  if (is_win) {
    sources += [ "system_util_win.cc" ]
    libs = []
    if (winhttp) {
      sources += [
        "encoding.h",
        "encoding_win.cc",
        "http_client_winhttp.cc",
      ]
      libs += [ "winhttp.lib" ]
    } else {
      defines += [ "CURL_STATICLIB" ]
      sources += [ "http_client_curl.cc" ]
      libs += [
        "advapi32.lib",
        "crypt32.lib",
        "normaliz.lib",
        "ws2_32.lib",
        "wldap32.lib",
      ]
      if (is_debug) {
        libs += [ "libcurl_a_debug.lib" ]
      } else {
        libs += [ "libcurl_a.lib" ]
      }
    }
  } else {
    defines += [ "CURL_STATICLIB" ]
    sources += [
      "http_client_curl.cc",
      "system_util_posix.cc",
    ]
    libs = [ "curl" ]
  }
}

executable("utility_test") {
  configs += [ "//build_config:project_common" ]
  if (is_win) {
    configs += [ "//build/config/win:static_runtime" ]
  }

  sources = [
    "test.cc",
    "url_test.cc",
  ]

  libs = []
  if (is_win) {
    if (is_debug) {
      libs += [ "gtestd.lib" ]
    } else {
      libs += [ "gtest.lib" ]
    }
  } else {
    libs += [ "gtest" ]
  }

  deps = [ ":utility" ]
}

executable("http_client_test") {
  configs += [ "//build_config:project_common" ]
  if (is_win) {
    configs += [ "//build/config/win:static_runtime" ]
  }

  sources = [ "http_client_test.cc" ]

  deps = [ ":utility" ]
}
