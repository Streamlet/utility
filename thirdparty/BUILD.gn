# zlib

config("zlib_public_config") {
  include_dirs = [
    "zlib",
    "zlib/contrib",
  ]
}

source_set("zlib") {
  sources = [
    "zlib/adler32.c",
    "zlib/compress.c",
    "zlib/crc32.c",
    "zlib/crc32.h",
    "zlib/deflate.c",
    "zlib/deflate.h",
    "zlib/gzclose.c",
    "zlib/gzguts.h",
    "zlib/gzlib.c",
    "zlib/gzread.c",
    "zlib/gzwrite.c",
    "zlib/infback.c",
    "zlib/inffast.c",
    "zlib/inffast.h",
    "zlib/inffixed.h",
    "zlib/inflate.c",
    "zlib/inflate.h",
    "zlib/inftrees.c",
    "zlib/inftrees.h",
    "zlib/trees.c",
    "zlib/trees.h",
    "zlib/uncompr.c",
    "zlib/zconf.h",
    "zlib/zlib.h",
    "zlib/zutil.c",
    "zlib/zutil.h",
  ]
  if (!is_win) {
    cflags = [
      "-Wno-implicit-function-declaration",
      "-Wno-deprecated-non-prototype",
      "-Wno-unknown-warning-option",
    ]
  }
  public_configs = [ ":zlib_public_config" ]
}

source_set("minizip") {
  sources = [
    "zlib/contrib/minizip/crypt.h",
    "zlib/contrib/minizip/ioapi.c",
    "zlib/contrib/minizip/ioapi.h",
    "zlib/contrib/minizip/mztools.c",
    "zlib/contrib/minizip/mztools.h",
    "zlib/contrib/minizip/unzip.c",
    "zlib/contrib/minizip/unzip.h",
    "zlib/contrib/minizip/zip.c",
    "zlib/contrib/minizip/zip.h",
  ]
  if (is_win) {
    sources += [
      "zlib/contrib/minizip/iowin32.c",
      "zlib/contrib/minizip/iowin32.h",
    ]
    cflags = [ "/wd5105" ]
  } else {
    cflags = [
      "-Wno-deprecated-non-prototype",
      "-Wno-unknown-warning-option",
    ]
  }
  deps = [ ":zlib" ]
  public_configs = [ ":zlib_public_config" ]
}

# crypto from libressl

config("libressl_crypto_public_config") {
  include_dirs = [ "libressl/include" ]
  if (is_posix) {
    cflags = [
      "-Wno-deprecated-declarations",
      "-Wno-unknown-warning-option",
    ]
  }
}

static_library("libressl_crypto") {
  defines = [
    "__BEGIN_HIDDEN_DECLS=",
    "__END_HIDDEN_DECLS=",
  ]

  if (is_win) {
    cflags = [ "/wd5105" ]
  }
  if (is_linux) {
    defines += [ "HAVE_ENDIAN_H" ]
  }
  if (is_mac) {
    defines += [
      "HAVE_STRLCPY",
      "HAVE_STRLCAT",
      "HAVE_MACHINE_ENDIAN_H",
    ]
  }

  sources = [
    "libressl/crypto/md5/md5_dgst.c",
    "libressl/crypto/md5/md5_one.c",
    "libressl/crypto/sha/sha1.c",
    "libressl/crypto/sha/sha256.c",
    "libressl/crypto/sha/sha3.c",
    "libressl/crypto/sha/sha512.c",
  ]
  if (is_win) {
    sources += [ "libressl/crypto/compat/explicit_bzero_win.c" ]
  } else {
    sources += [ "libressl/crypto/compat/explicit_bzero.c" ]
  }

  include_dirs = [
    "libressl/crypto",
    "libressl/include/compat",
  ]

  if (is_win) {
    libs = [ "ws2_32.lib" ]
  }

  public_configs = [ ":libressl_crypto_public_config" ]
}

# rapidxml

config("rapidxml_public_config") {
  include_dirs = [ "rapidxml" ]
}

group("rapidxml") {
  public_configs = [ ":rapidxml_public_config" ]
}

# yyjson

config("yyjson_public_config") {
  include_dirs = [ "yyjson/src" ]
}

static_library("yyjson") {
  sources = [
    "yyjson/src/yyjson.c",
    "yyjson/src/yyjson.h",
  ]
  public_configs = [ ":yyjson_public_config" ]
}

# googletest

config("googletest_public_config") {
  include_dirs = [ "googletest/googletest/include" ]
}

static_library("googletest") {
  sources = [ "googletest/googletest/src/gtest-all.cc" ]
  include_dirs = [ "googletest/googletest" ]
  public_configs = [ ":googletest_public_config" ]
}
