// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "log"
#include "native_string"

namespace xl {

namespace log {

enum LogTarget {
  LOG_TARGET_STDOUT = 0x01,
  LOG_TARGET_FILE = 0x02,
#ifdef _WIN32
  LOG_TARGET_DEBUGGER = 0x04,
#endif

  LOG_TARGET_ALL = -1,
  LOG_TARGET_DEFAULT = LOG_TARGET_ALL,
};

enum LogContent {
  LOG_CONTENT_TIME = 0x01,
  LOG_CONTENT_LEVEL = 0x02,
  LOG_CONTENT_APP_NAME = 0x04,

  LOG_CONTENT_FULL_FILE_NAME = 0x10,
  LOG_CONTENT_FILE_NAME = 0x20,
  LOG_CONTENT_FULL_FUNC_NAME = 0x40,
  LOG_CONTENT_FUNC_NAME = 0x80,
  LOG_CONTENT_LINE = 0x100,

  LOG_CONTENT_PID = 0x1000,
  LOG_CONTENT_TID = 0x2000,

  LOG_CONTENT_ALL = -1,
  LOG_CONTENT_DEFAULT = (LOG_CONTENT_ALL & (~LOG_CONTENT_FULL_FILE_NAME) & (~LOG_CONTENT_FULL_FUNC_NAME)),
};

bool setup(const TCHAR *app_name,
           int level = XL_LOG_LEVEL_DEFAULT,
           int content = LOG_CONTENT_DEFAULT,
           int target = LOG_TARGET_DEFAULT,
           const TCHAR *log_file = NULL);
bool setup_from_file(const TCHAR *log_setting_file);
void shutdown();

/**
 * Log Setting File Format
 *
 * It is an INI file, without sections, UTF-8 encoded without BOM.
 * Sample:
 *
 * [Log]
 * AppName    = MyApp   ; AppName defines app_name arguments of setuo_log
 * LogLevel   = Default ; valid values are: Off, Fatal, Error, Warn, Info, Debug or Default. Case sensitive.
 * LogContent = Default ; valid values are: Time, Level, AppName, FileName, FullFileName,
 *                      ;                   FuncName, FullFuncName, Line, PID, TID, All or Default.
 *                      ; Case sensitive, order insensitive. Can be combined by commas.
 * LogTarget  = Default ; valid values are: StdOut, File, Debugger(Windows only), All or Default.
 *                      ; Case sensitive, order insensitive. Can be combined by commas.
 * LogFile    = <Path>  ; If LogTarget contains File, LogFile specifies which file to save the log.
 */

} // namespace log

} // namespace xl
