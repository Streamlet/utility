// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "native_string"
#include "string"
#include <functional>
#include <map>
#include <memory>
#include <system_error>

namespace xl {

namespace http {

enum Method {
  MEHOD_OPTIONS = 0,
  METHOD_HEAD,
  METHOD_GET,
  METHOD_POST,
  METHOD_PUT,
  METHOD_DELETE,
  METHOD_TRACE,
  METHOD_CONNECT,

  METHOD_COUNT,
};

enum Status {
  STATUS_CONTINUE = 100,
  STATUS_SWITCHING_PROTOCOLS = 101,
  STATUS_PROCESSING = 102,
  STATUS_EARLY_HINTS = 103,
  STATUS_OK = 200,
  STATUS_CREATED = 201,
  STATUS_ACCEPTED = 202,
  STATUS_NON_AUTHORITATIVE_INFORMATION = 203,
  STATUS_NO_CONTENT = 204,
  STATUS_RESET_CONTENT = 205,
  STATUS_PARTIAL_CONTENT = 206,
  STATUS_MULTI_STATUS = 207,
  STATUS_ALREADY_REPORTED = 208,
  STATUS_IM_USED = 226,
  STATUS_MULTIPLE_CHOICES = 300,
  STATUS_MOVED_PERMANENTLY = 301,
  STATUS_FOUND = 302,
  STATUS_SEE_OTHER = 303,
  STATUS_NOT_MODIFIED = 304,
  STATUS_USE_PROXY = 305,
  STATUS_SWITCH_PROXY = 306,
  STATUS_TEMPORARY_REDIRECT = 307,
  STATUS_PERMANENT_REDIRECT = 308,
  STATUSERRORON_WIKIMEDIA = 404,
  STATUS_BAD_REQUEST = 400,
  STATUS_UNAUTHORIZED = 401,
  STATUS_PAYMENT_REQUIRED = 402,
  STATUS_FORBIDDEN = 403,
  STATUS_NOT_FOUND = 404,
  STATUS_METHOD_NOT_ALLOWED = 405,
  STATUS_NOT_ACCEPTABLE = 406,
  STATUS_PROXY_AUTHENTICATION_REQUIRED = 407,
  STATUS_REQUEST_TIMEOUT = 408,
  STATUS_CONFLICT = 409,
  STATUS_GONE = 410,
  STATUS_LENGTH_REQUIRED = 411,
  STATUS_PRECONDITION_FAILED = 412,
  STATUS_PAYLOAD_TOO_LARGE = 413,
  STATUS_URI_TOO_LONG = 414,
  STATUS_UNSUPPORTED_MEDIA_TYPE = 415,
  STATUS_RANGE_NOT_SATISFIABLE = 416,
  STATUS_EXPECTATION_FAILED = 417,
  STATUS_IM_A_TEAPOT = 418,
  STATUS_MISDIRECTED_REQUEST = 421,
  STATUS_UNPROCESSABLE_CONTENT = 422,
  STATUS_LOCKED = 423,
  STATUS_FAILED_DEPENDENCY = 424,
  STATUS_TOO_EARLY = 425,
  STATUS_UPGRADE_REQUIRED = 426,
  STATUS_PRECONDITION_REQUIRED = 428,
  STATUS_TOO_MANY_REQUESTS = 429,
  STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
  STATUS_UNAVAILABLE_FOR_LEGAL_REASONS = 451,
  STATUS_INTERNAL_SERVER_ERROR = 500,
  STATUS_NOT_IMPLEMENTED = 501,
  STATUS_BAD_GATEWAY = 502,
  STATUS_SERVICE_UNAVAILABLE = 503,
  STATUS_GATEWAY_TIMEOUT = 504,
  STATUS_HTTP_VERSION_NOT_SUPPORTED = 505,
  STATUS_VARIANT_ALSO_NEGOTIATES = 506,
  STATUS_INSUFFICIENT_STORAGE = 507,
  STATUS_LOOP_DETECTED = 508,
  STATUS_NOT_EXTENDED = 510,
  STATUS_NETWORK_AUTHENTICATION_REQUIRED = 511,
};

typedef std::multimap<std::string, std::string> Headers;

/**
 * @param buffer buffer to receive data
 * @param size buffer size
 * @param total_size total size of data
 * @return bytes written. returns 0 incicates no more data.
 */
typedef std::function<size_t(void *buffer, size_t size, long long *total_size)> DataReader;

/**
 * @param buffer data to be process
 * @param size size of data. size == 0 indicates no more data.
 * @return return bytes that processed. return value must be equal to the augument size.
 *         If not, it will cause failre and abort the receiving progress.
 */
typedef std::function<size_t(const void *buffer, size_t size)> DataWriter;

/**
 * DataReader wrapper for memory data
 */
DataReader buffer_reader(const std::string &string_buffer);

/**
 * DataReader wrapper for file
 */
DataReader file_reader(const TCHAR *path);

/**
 * DataWriter wrapper for memory data
 */
DataWriter buffer_writer(std::string *string_buffer);

/**
 * DataWriter wrapper for faile
 */
DataWriter file_writer(const TCHAR *path);

struct Request {
  Method method = METHOD_GET;
  std::string url;
  Headers headers;
  DataReader body;
};

struct Response {
  Headers *headers = nullptr;
  DataWriter body;
};

struct Option {
  /**
   * user agent. default: empty string, simulatiing common web browser's user agent.
   */
  std::string user_agent;

  /**
   * timeout in milliseconds. default: 0, depends on upstream library, curl for posix and WihHTTP for windows.
   */
  unsigned int timeout = 0;

  /**
   * if follow 301/302 redirection. default: true
   */
  bool follow_redirect = true;
};

typedef std::multimap<std::string, std::string> FormData;

std::string build_query(const FormData &form_data);
FormData parse_query(const std::string &query_string);

/**
 * @brief performance an HTTP request
 * @param request request data
 * @param response  response data
 * @param option options
 * @return For positive values, it is http status code.
 *         For negative values, its absolute value indicates errno for posix, or system error codes for windows.
 */
int send(const Request &request, Response *response, const Option *option = nullptr);

int get(const std::string &url, DataWriter response_body);
int get(const std::string &url, const Headers &request_headers, Headers &response_headers, DataWriter response_body);

int post(const std::string &url, DataReader request_body, DataWriter response_body);
int post(const std::string &url,
         const Headers &request_headers,
         DataReader request_body,
         Headers &response_headers,
         DataWriter response_body);

int post_form(const std::string &url,
              const Headers &request_headers,
              const FormData &form_data,
              Response *response,
              const Option *option = nullptr);

int post_form(const std::string &url, const FormData &form_data, DataWriter response_body);

int post_form(const std::string &url,
              const Headers &request_headers,
              const FormData &form_data,
              Headers &response_headers,
              DataWriter response_body);

struct MultiPartFormValue {
  std::string value;
  native_string file_path;
};

typedef std::map<std::string, MultiPartFormValue> MultiPartFormData;

int post_multipart_form(const std::string &url,
                        const Headers &request_headers,
                        const MultiPartFormData form_data,
                        Response *response,
                        const Option *option = nullptr);

int post_multipart_form(const std::string &url, const MultiPartFormData form_data, DataWriter response_writer);

int post_multipart_form(const std::string &url,
                        const Headers &request_headers,
                        const MultiPartFormData form_data,
                        Headers &response_headers,
                        DataWriter response_body);

} // namespace http

} // namespace xl
