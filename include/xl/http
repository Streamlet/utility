#include "native_string"
#include "string"
#include <functional>
#include <map>
#include <memory>
#include <system_error>

namespace xl {

namespace http {

enum Method {
  Options = 0,
  Head,
  Get,
  Post,
  Put,
  Delete,
  Trace,
  Connect,

  MethodCount,
};

extern const char *METHOD_NAME[MethodCount];
extern const wchar_t *METHOD_NAME_W[MethodCount];

enum StatusCode {
  StatusContinue = 100,
  StatusSwitchingProtocols = 101,
  StatusProcessing = 102,
  StatusEarlyHints = 103,
  StatusOK = 200,
  StatusCreated = 201,
  StatusAccepted = 202,
  StatusNonAuthoritativeInformation = 203,
  StatusNoContent = 204,
  StatusResetContent = 205,
  StatusPartialContent = 206,
  StatusMultiStatus = 207,
  StatusAlreadyReported = 208,
  StatusIMUsed = 226,
  StatusMultipleChoices = 300,
  StatusMovedPermanently = 301,
  StatusFound = 302,
  StatusSeeOther = 303,
  StatusNotModified = 304,
  StatusUseProxy = 305,
  StatusSwitchProxy = 306,
  StatusTemporaryRedirect = 307,
  StatusPermanentRedirect = 308,
  StatuserroronWikimedia = 404,
  StatusBadRequest = 400,
  StatusUnauthorized = 401,
  StatusPaymentRequired = 402,
  StatusForbidden = 403,
  StatusNotFound = 404,
  StatusMethodNotAllowed = 405,
  StatusNotAcceptable = 406,
  StatusProxyAuthenticationRequired = 407,
  StatusRequestTimeout = 408,
  StatusConflict = 409,
  StatusGone = 410,
  StatusLengthRequired = 411,
  StatusPreconditionFailed = 412,
  StatusPayloadTooLarge = 413,
  StatusURITooLong = 414,
  StatusUnsupportedMediaType = 415,
  StatusRangeNotSatisfiable = 416,
  StatusExpectationFailed = 417,
  StatusImATeapot = 418,
  StatusMisdirectedRequest = 421,
  StatusUnprocessableContent = 422,
  StatusLocked = 423,
  StatusFailedDependency = 424,
  StatusTooEarly = 425,
  StatusUpgradeRequired = 426,
  StatusPreconditionRequired = 428,
  StatusTooManyRequests = 429,
  StatusRequestHeaderFieldsTooLarge = 431,
  StatusUnavailableForLegalReasons = 451,
  StatusInternalServerError = 500,
  StatusNotImplemented = 501,
  StatusBadGateway = 502,
  StatusServiceUnavailable = 503,
  StatusGatewayTimeout = 504,
  StatusHTTPVersionNotSupported = 505,
  StatusVariantAlsoNegotiates = 506,
  StatusInsufficientStorage = 507,
  StatusLoopDetected = 508,
  StatusNotExtended = 510,
  StatusNetworkAuthenticationRequired = 511,
};

typedef std::multimap<std::string, std::string> Headers;

/**
 * @param buffer buffer to receive data
 * @param size buffer size
 * @param total_size total size of data
 * @return bytes written. returns 0 incicates no more data.
 */
typedef std::function<size_t(void *buffer, size_t size, long long *total_size)> DataReader;

/**
 * @param buffer data to be process
 * @param size size of data. size == 0 indicates no more data.
 * @return return bytes that processed. return value must be equal to the augument size.
 *         If not, it will cause failre and abort the receiving progress.
 */
typedef std::function<size_t(const void *buffer, size_t size)> DataWriter;

/**
 * DataReader wrapper for memory data
 */
DataReader BufferReader(const std::string &string_buffer);

/**
 * DataReader wrapper for file
 */
DataReader FileReader(const TCHAR *path);

/**
 * DataWriter wrapper for memory data
 */
DataWriter BufferWriter(std::string *string_buffer);

/**
 * DataWriter wrapper for faile
 */
DataWriter FileWriter(const TCHAR *path);

struct Request {
  Method method = Get;
  std::string url;
  Headers headers;
  DataReader body;
};

struct Response {
  Headers *headers = nullptr;
  DataWriter body;
};

struct Option {
  /**
   * user agent. default: empty string, simulatiing common web browser's user agent.
   */
  std::string user_agent;

  /**
   * timeout in milliseconds. default: 0, depends on upstream library, curl for posix and WihHTTP for windows.
   */
  unsigned int timeout = 0;

  /**
   * if follow 301/302 redirection. default: true
   */
  bool follow_redirect = true;
};

/**
 * @brief performance an HTTP request
 * @param request request data
 * @param response  response data
 * @param option options
 * @return For positive values, it is http status code.
 *         For negative values, its absolute value indicates errno for posix, or system error codes for windows.
 */
int send(const Request &request, Response *response, const Option *option = nullptr);

int get(const std::string &url, DataWriter response_body);
int get(const std::string &url, const Headers &request_headers, Headers &response_headers, DataWriter response_body);

int post(const std::string &url, DataReader request_body, DataWriter response_body);
int post(const std::string &url,
         const Headers &request_headers,
         DataReader request_body,
         Headers &response_headers,
         DataWriter response_body);

typedef std::map<std::string, std::string> FormData;

int post_form(const std::string &url,
              const Headers &request_headers,
              const FormData &form_data,
              Response *response,
              const Option *option = nullptr);

int post_form(const std::string &url, const FormData &form_data, DataWriter response_body);

int post_form(const std::string &url,
              const Headers &request_headers,
              const FormData &form_data,
              Headers &response_headers,
              DataWriter response_body);

struct MultiPartFormValue {
  native_string file_path;
  std::string value;
};

typedef std::map<std::string, MultiPartFormValue> MultiPartFormData;

int post_multipart_form(const std::string &url,
                        const Headers &request_headers,
                        const MultiPartFormData form_data,
                        Response *response,
                        const Option *option = nullptr);

int post_multipart_form(const std::string &url, const MultiPartFormData form_data, DataWriter response_writer);

int post_multipart_form(const std::string &url,
                        const Headers &request_headers,
                        const MultiPartFormData form_data,
                        Headers &response_headers,
                        DataWriter response_body);

} // namespace http

} // namespace xl
