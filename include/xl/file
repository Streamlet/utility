// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "native_string"
#include <cstdio>
#include <functional>
#include <string>

#ifdef _WIN32
#define ftell _ftelli64
#define fseek _fseeki64
#else
#define _FILE_OFFSET_BITS 64
#define ftell             ftello
#define fseek             fseeko
#endif

#ifndef _WIN32
#include <sys/stat.h>
#include <unistd.h>
#endif

namespace xl {

namespace file {

std::string read(const TCHAR *path);

std::string read_text_auto(const TCHAR *path);

std::string read_text_utf8_bom(const TCHAR *path);

std::wstring read_text_utf16_le(const TCHAR *path);

std::wstring read_text_utf16_be(const TCHAR *path);

bool write(const TCHAR *path, const std::string &text);

bool write_text_uft8_bom(const TCHAR *path, const std::string &text);

bool write_text_utf16_le(const TCHAR *path, const std::wstring &text);

bool write_text_utf16_be(const TCHAR *path, const std::wstring &text);

} // namespace file

namespace fs {

bool touch(const TCHAR *path);

bool exists(const TCHAR *path);

#if defined(_WIN32)
typedef struct _stat64 stat_data;
#elif defined(__APPLE__)
typedef struct stat stat_data;
#else
typedef struct stat64 stat_data;
#endif

bool stat(const TCHAR *path, stat_data *st);

long long size(const TCHAR *path);

unsigned int attribute(const TCHAR *path);
bool attribute(const TCHAR *path, unsigned int attribute);

bool is_dir(const TCHAR *path);
bool is_dir(unsigned int attribute);

bool unlink(const TCHAR *path);

bool mkdir(const TCHAR *path);

bool mkdirs(const TCHAR *path);

typedef std::function<bool(const native_string &path, bool is_dir)> EnumDirCallback;
bool enum_dir(const TCHAR *path, EnumDirCallback callback, bool recursive = false, bool sub_dir_first = false);

bool rmdir(const TCHAR *path);

bool remove(const TCHAR *path);

bool remove_all(const TCHAR *path);

bool move(const TCHAR *path, const TCHAR *new_path);

bool copy_file(const TCHAR *path, const TCHAR *new_path);
bool copy_dir(const TCHAR *path, const TCHAR *new_path);
bool copy(const TCHAR *path, const TCHAR *new_path);

native_string env_var(const TCHAR *env_name);

native_string tmp_dir();

} // namespace fs

namespace path {

extern const TCHAR SEP;
extern const native_string SEP_STR;
extern const TCHAR DOT;
extern const native_string DOT_STR;

native_string dirname(const TCHAR *path);  // /path/to/file.ext => /path/to
native_string filename(const TCHAR *path); // /path/to/file.ext => file.ext
native_string basename(const TCHAR *path); // /path/to/file.ext => file
native_string extname(const TCHAR *path);  // /path/to/file.ext => .ext

template <typename... T>
native_string join(T... args);
template <typename... T>
inline native_string join(const TCHAR *first, T... rest);
template <typename... T>
inline native_string join(const native_string &first, T... rest);
template <typename... T>
inline native_string join(native_string &&first, T... rest);
template <>
inline native_string join(const TCHAR *last);
template <>
inline native_string join(const native_string &last);
template <>
inline native_string join(native_string &&last);

template <typename... T>
inline native_string join(const TCHAR *first, T... rest) {
  return native_string(first) + native_string(1, SEP) + join<>(rest...);
}
template <typename... T>
inline native_string join(const native_string &first, T... rest) {
  return first + native_string(1, SEP) + join<>(rest...);
}
template <typename... T>
inline native_string join(native_string &&first, T... rest) {
  return std::move(first) + native_string(1, SEP) + join<>(rest...);
}
template <>
inline native_string join(const TCHAR *last) {
  return native_string(last);
}
template <>
inline native_string join(const native_string &last) {
  return last;
}
template <>
inline native_string join(native_string &&last) {
  return std::move(last);
}

} // namespace path

} // namespace xl