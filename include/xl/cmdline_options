// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "native_string"
#include <map>
#include <memory>
#include <sstream>
#include <string>

namespace xl {

namespace cmdline_options {

//
// @brief A struct to hold native_string map and provides helper functions
//
struct parsed_options {

  //
  // @brief Raw parsed key-value map
  //
  std::map<native_string, native_string> parsed_map;

  //
  // @brief Check if an option exists
  //
  // @param option_name Option name to check
  // @return Return true if option_name exists, otherwise return false.
  //
  bool has(const TCHAR *option_name) const {
    return parsed_map.find(option_name) != parsed_map.end();
  }

  //
  // @brief Get value of an option
  //
  // @param option_name Option name to get value
  // @return Return option value of option_name exists, otherwise return empty string.
  //
  native_string get(const TCHAR *option_name) const {
    auto it = parsed_map.find(option_name);
    return it != parsed_map.end() ? it->second : native_string();
  }

  //
  // @brief Get value of an option and transform to specified type
  //
  // @tparam T Ttarget type to transfrom to
  // @param option_name Option name to get value
  // @return Return transformed value if option_name exists, otherwise return default value of type T.
  // @remark The transform result depends on implement of std::basic_stringstream.
  //
  template <typename T>
  T get_as(const TCHAR *option_name) const {
    T t = {};
    native_string value = get(option_name);
    if (value.empty()) {
      return t;
    }
    native_string_stream ss;
    ss << value;
    ss >> t;
    return t;
  }
};

//
// @brief Parse command line from argc and argv.
//
// @param argc The argc argument of main function
// @param argv The argv argument of main function
// @return return native string map stored in parsed_options
//
parsed_options parse(int argc, const TCHAR *argv[]);

#ifdef _WIN32

//
// @brief Parse command line from entire command line. (Windows only)
//
// @param cmdline The command line argument of WinMain function
// @return return native string map stored in parsed_options
//
parsed_options parse(const TCHAR *cmdline);

#endif

} // namespace cmdline_options

} // namespace xl
