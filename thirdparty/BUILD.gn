# boost

config("boost_public_config") {
  defines = [ "BOOST_AUTO_LINK_SYSTEM" ]
  include_dirs = [ "$target_gen_dir/boost/include" ]
  lib_dirs = [ "$target_gen_dir/boost/lib" ]
}

boost("boost") {
  boost_source_dir = "boost"
  boost_libraries = [
    "program_options",
    "filesystem",
  ]
  boost_install_dir = "$target_gen_dir/boost"
  boost_layout = "system"
  if (is_win) {
    boost_outputs = [
      "$target_gen_dir/boost/lib/libboost_program_options.lib",
      "$target_gen_dir/boost/lib/libboost_filesystem.lib",
    ]
  } else {
    boost_outputs = [
      "$target_gen_dir/boost/lib/libboost_program_options.a",
      "$target_gen_dir/boost/lib/libboost_filesystem.a",
    ]
  }

  public_configs = [ ":boost_public_config" ]
}

# loki

config("loki_public_config") {
  include_dirs = [ "loki/include" ]
  if (is_win) {
    cflags = [ "/wd4828" ]
  }
}

group("loki") {
  public_configs = [ ":loki_public_config" ]
}

#googletest

config("googletest_public_config") {
  include_dirs = [ "$target_gen_dir/googletest/include" ]
  if (is_posix && target_cpu == "x64") {
    lib_dirs = [ "$target_gen_dir/googletest/lib" ]
  } else {
    lib_dirs = [ "$target_gen_dir/googletest/lib" ]
  }
}

cmake("googletest") {
  testonly = true
  cmake_root_dir = "googletest"
  cmake_options = [ "BUILD_GMOCK=OFF" ]
  if (!is_win || !static_link_crt) {
    cmake_options += [ "googletest_force_shared_crt=ON" ]
  }
  cmake_install_dir = "$target_gen_dir/googletest"
  if (is_win) {
    cmake_outputs = [ "$target_gen_dir/googletest/lib/gtest.lib" ]
  } else {
    if (target_cpu == "x64") {
      cmake_outputs = [ "$target_gen_dir/googletest/lib64/libgtest.a" ]
    } else {
      cmake_outputs = [ "$target_gen_dir/googletest/lib/libgtest.a" ]
    }
  }
  public_configs = [ ":googletest_public_config" ]
}

#curl

if (is_win && !winhttp) {
  config("curl_public_config") {
    include_dirs = [ "$target_gen_dir/curl/include" ]
    lib_dirs = [ "$target_gen_dir/curl/lib" ]
    defines = []
    if (static_link_crt) {
      defines += [ "CURL_STATICLIB" ]
    }
  }

  cmake("curl") {
    cmake_root_dir = "curl"
    cmake_options = [
      "BUILD_CURL_EXE=OFF",
      "BUILD_SHARED_LIBS=OFF",
      "ENABLE_UNICODE=ON",
    ]
    if (is_posix) {
      cmake_options += [ "CURL_USE_OPENSSL=ON" ]
    }
    if (is_win && static_link_crt) {
      cmake_options += [ "CURL_STATIC_CRT=ON" ]
    }
    cmake_install_dir = "$target_gen_dir/curl"
    if (is_debug) {
      cmake_outputs = [ "$target_gen_dir/curl/lib/libcurl-d.lib" ]
    } else {
      cmake_outputs = [ "$target_gen_dir/curl/lib/libcurl.lib" ]
    }

    public_configs = [ ":curl_public_config" ]
  }
}
if (is_posix) {
  config("curl_public_config") {
    include_dirs = [ "$target_gen_dir/curl/include" ]
    lib_dirs = [ "$target_gen_dir/curl/lib" ]
  }

  # for posix
  # install openssl-devel, zlib-devel in your system
  makefile("curl") {
    makefile_root_dir = "curl"
    makefile_prefix = "$target_gen_dir/curl"
    makefile_options = [ "--with-ssl" ]
    if (is_debug) {
      makefile_options += [ "--enable-debug" ]
    }
    makefile_outputs = [ "$target_gen_dir/curl/lib/libcurl.a" ]
    public_configs = [ ":curl_public_config" ]
  }
}

#rapidjson

config("rapidjson_public_config") {
  include_dirs = [ "rapidjson/include" ]
  defines = [ "_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS" ]
}

group("rapidjson") {
  public_configs = [ ":rapidjson_public_config" ]
}

# openssl

if (is_win) {
  config("openssl_public_config") {
    include_dirs = [ "openssl/include" ]
    cflags = [ "-Wno-deprecated-declarations" ]
  }

  source_set("openssl") {
    sources = [
      "openssl/crypto/md5/md5_dgst.c",
      "openssl/crypto/md5/md5_one.c",
      "openssl/crypto/mem_clr.c",
      "openssl/crypto/sha/sha1_one.c",
      "openssl/crypto/sha/sha1dgst.c",
      "openssl/crypto/sha/sha256.c",
      "openssl/crypto/sha/sha512.c",
    ]
    if (is_posix) {
      deps = [ ":openssl_gen_conf" ]
    }
    public_configs = [ ":openssl_public_config" ]
  }
}

if (is_posix) {
  config("openssl_public_config") {
    include_dirs = [ "$target_gen_dir/openssl/include" ]
    lib_dirs = [ "$target_gen_dir/openssl/lib" ]
    cflags = [ "-Wno-deprecated-declarations" ]
  }

  makefile("openssl") {
    makefile_root_dir = "openssl"
    makefile_config_cmd = "./config"
    makefile_prefix = "$target_gen_dir/openssl"
    makefile_options = [
      "threads",
      "shared",
    ]
    if (is_debug) {
      makefile_options += [ "--debug" ]
    } else {
      makefile_options += [ "--release" ]
    }
    makefile_options +=
        [ "--openssldir=" +
          rebase_path("$target_gen_dir/openssl", root_build_dir) ]
    makefile_target = [ "include/openssl/opensslconf.h" ]
    makefile_outputs = [ "$target_gen_dir/openssl/lib/libcrypto.a" ]
    public_configs = [ ":openssl_public_config" ]
  }
}

# zlibwrap

config("zlibwrap_public_config") {
  include_dirs = [ "ZLibWrap/include" ]
}

group("zlibwrap") {
  public_configs = [ ":zlibwrap_public_config" ]
  deps = [ "ZLibWrap/src:zlibwrap" ]
}
