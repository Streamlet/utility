// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "encoding"
#include <memory>
#include <sstream>
#include <string>

#define LOG_LEVEL_OFF   0
#define LOG_LEVEL_FATAL 1
#define LOG_LEVEL_ERROR 2
#define LOG_LEVEL_WARN  3
#define LOG_LEVEL_INFO  4
#define LOG_LEVEL_DEBUG 5

#ifdef _DEBUG
#define LOG_LEVEL_DEFAULT LOG_LEVEL_DEBUG
#else
#define LOG_LEVEL_DEFAULT LOG_LEVEL_INFO
#endif

#ifndef LOG_LEVEL
#define LOG_LEVEL LOG_LEVEL_DEFAULT
#endif

namespace xl {
namespace logging {

void log(int level, const char *file, const char *function, int line, std::string message);

template <typename... T>
inline void log_va_ss(std::stringstream &ss, int level, const char *file, const char *function, int line, T... args);

template <>
inline void log_va_ss(std::stringstream &ss, int level, const char *file, const char *function, int line) {
  log(level, file, function, line, std::move(ss.str()));
}

template <typename T0, typename... T>
inline void
log_va_ss(std::stringstream &ss, int level, const char *file, const char *function, int line, T0 arg0, T... rest) {
  ss << arg0;
  log_va_ss(ss, level, file, function, line, std::forward<T>(rest)...);
}

template <typename... T>
inline void log_va_ss(std::stringstream &ss,
                      int level,
                      const char *file,
                      const char *function,
                      int line,
                      const wchar_t *arg0,
                      T... rest) {
  ss << encoding::utf16_to_utf8(arg0);
  log_va_ss(ss, level, file, function, line, std::forward<T>(rest)...);
}

#if __cplusplus >= 201703L
template <typename... T>
inline void log_va_ss(std::stringstream &ss,
                      int level,
                      const char *file,
                      const char *function,
                      int line,
                      const std::wstring_view &arg0,
                      T... rest) {
  ss << encoding::utf16_to_utf8(arg0.data(), arg0.length());
  log_va_ss(ss, level, file, function, line, std::forward<T>(rest)...);
}
#endif

template <typename... T>
inline void log_va_ss(std::stringstream &ss,
                      int level,
                      const char *file,
                      const char *function,
                      int line,
                      const std::wstring &arg0,
                      T... rest) {
  ss << encoding::utf16_to_utf8(arg0);
  log_va_ss(ss, level, file, function, line, std::forward<T>(rest)...);
}

template <typename... T>
inline void
log_va_ss(std::stringstream &ss, int level, const char *file, const char *function, int line, wchar_t arg0, T... rest) {
  ss << encoding::utf16_to_utf8(&arg0, 1);
  log_va_ss(ss, level, file, function, line, std::forward<T>(rest)...);
}

template <typename... T>
inline void log_va(int level, const char *file, const char *function, int line, T... args) {
  std::stringstream ss;
  log_va_ss(ss, level, file, function, line, std::forward<T>(args)...);
}

} // namespace logging

} // namespace xl

#define LOG(level, ...) ::xl::logging::log_va(level, __FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)

#if (LOG_LEVEL >= LOG_LEVEL_FATAL)
#define LOG_FATAL(...) LOG(LOG_LEVEL_FATAL, __VA_ARGS__)
#else
#define LOG_FATAL(...)
#endif

#if (LOG_LEVEL >= LOG_LEVEL_ERROR)
#define LOG_ERROR(...) LOG(LOG_LEVEL_ERROR, __VA_ARGS__)
#else
#define LOG_ERROR(...)
#endif

#if (LOG_LEVEL >= LOG_LEVEL_WARN)
#define LOG_WARN(...) LOG(LOG_LEVEL_WARN, __VA_ARGS__)
#else
#define LOG_WARN(...)
#endif

#if (LOG_LEVEL >= LOG_LEVEL_INFO)
#define LOG_INFO(...) LOG(LOG_LEVEL_INFO, __VA_ARGS__)
#else
#define LOG_INFO(...)
#endif

#if (LOG_LEVEL >= LOG_LEVEL_DEBUG)
#define LOG_DEBUG(...) LOG(LOG_LEVEL_DEBUG, __VA_ARGS__)
#else
#define LOG_DEBUG(...)
#endif
