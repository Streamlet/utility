#pragma once

#include <list>
#include <set>
#include <string>
#include <unordered_set>
#if __cplusplus >= 201703L
#include <optional>
#include <string_view>
#endif

#include <rapidxml.hpp>

/* Adding declarations to make it compatible with gcc 4.7 and greater */
namespace rapidxml {
namespace internal {

template <class OutIt, class Ch>
inline OutIt print_children(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_attributes(OutIt out, const xml_node<Ch> *node, int flags);

template <class OutIt, class Ch>
inline OutIt print_data_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_cdata_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_element_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_declaration_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_comment_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_doctype_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

template <class OutIt, class Ch>
inline OutIt print_pi_node(OutIt out, const xml_node<Ch> *node, int flags, int indent);

} // namespace internal
} // namespace rapidxml

#include <rapidxml_print.hpp>

namespace xl {

namespace xml {

enum WriteFlags {
  WRITE_FLAG_NONE = 0,
  WRITE_FLAG_PRETTY = 1 << 0,
  WRITE_FLAG_WRITE_EMPTY_VALUES = 1 << 1,
};

} // namespace xml

template <typename T>
struct xml_accessor {
  static bool read(T &ref, const ::rapidxml::xml_node<> &xml_node) {
    return ref.xml_read(xml_node);
  }
  static bool will_write(const T &ref, unsigned int flags) {
    return true;
  }
  static void write(const T &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    ref.xml_write(xml_node, flags);
  }
};

template <>
class xml_accessor<std::string> {
public:
  static bool read(std::string &ref, const ::rapidxml::xml_node<> &xml_node) {
    ref.assign(xml_node.value(), xml_node.value_size());
    return true;
  }
  static bool read(std::string &ref, const ::rapidxml::xml_attribute<> &xml_attribute) {
    ref.assign(xml_attribute.value(), xml_attribute.value_size());
    return true;
  }
  static bool will_write(const std::string &ref, unsigned int flags) {
    return true;
  }
  static void write(const std::string &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    xml_node.value(ref.c_str(), ref.length());
  }
  static void write(const std::string &ref, ::rapidxml::xml_attribute<> &xml_attribute, unsigned int flags) {
    xml_attribute.value(ref.c_str(), ref.length());
  }
};

#if __cplusplus >= 201703L
template <>
class xml_accessor<std::string_view> {
public:
  static bool read(std::string_view &ref, const ::rapidxml::xml_node<> &xml_node) {
    ref = {xml_node.value(), xml_node.value_size()};
    return true;
  }
  static bool read(std::string_view &ref, const ::rapidxml::xml_attribute<> &xml_attribute) {
    ref = {xml_attribute.value(), xml_attribute.value_size()};
    return true;
  }
  static bool will_write(const std::string_view &ref, unsigned int flags) {
    return true;
  }
  static void write(const std::string_view &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {
    xml_node.value(ref.data(), ref.length());
  }
  static void write(const std::string_view &ref, ::rapidxml::xml_attribute<> &xml_attribute, unsigned int flags) {
    xml_attribute.value(ref.data(), ref.length());
  }
};
#endif

#define XML_ACCESSOR_CONTAINER(container)                                                                              \
  template <typename T>                                                                                                \
  class xml_accessor<container<T>> {                                                                                   \
  public:                                                                                                              \
    static bool read(container<T> &ref, const ::rapidxml::xml_node<> &xml_node) {                                      \
      for (const ::rapidxml::xml_node<> *p = &xml_node; p != nullptr;                                                  \
           p = p->next_sibling(xml_node.name(), xml_node.name_size())) {                                               \
        T t;                                                                                                           \
        if (!xml_accessor<T>::read(t, *p)) {                                                                           \
          return false;                                                                                                \
        }                                                                                                              \
        ref.insert(ref.end(), std::move(t));                                                                           \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool will_write(const container<T> &ref, unsigned int flags) {                                              \
      return true;                                                                                                     \
    }                                                                                                                  \
    static void write(const container<T> &ref, ::rapidxml::xml_node<> &xml_node, unsigned int flags) {                 \
      ::rapidxml::xml_node<> *parent = xml_node.parent();                                                              \
      if (parent == nullptr) {                                                                                         \
        return;                                                                                                        \
      }                                                                                                                \
      bool written_first = false;                                                                                      \
      for (const T &item : ref) {                                                                                      \
        if (!written_first) {                                                                                          \
          xml_accessor<T>::write(item, xml_node, flags);                                                               \
          written_first = true;                                                                                        \
        } else {                                                                                                       \
          ::rapidxml::xml_node<> *new_node = xml_node.document()->allocate_node(                                       \
              ::rapidxml::node_element, xml_node.name(), nullptr, xml_node.name_size());                               \
          parent->append_node(new_node);                                                                               \
          xml_accessor<T>::write(item, *new_node, flags);                                                              \
        }                                                                                                              \
      }                                                                                                                \
    }                                                                                                                  \
  }

XML_ACCESSOR_CONTAINER(std::vector);
XML_ACCESSOR_CONTAINER(std::list);
XML_ACCESSOR_CONTAINER(std::set);
XML_ACCESSOR_CONTAINER(std::unordered_set);

} // namespace xl

#define XL_XML_BEGIN(struct_type)                                                                                      \
  struct struct_type {                                                                                                 \
  private:                                                                                                             \
    template <typename T, size_t Index>                                                                                \
    struct field_xml_accessor_t;                                                                                       \
    typedef struct_type Type;                                                                                          \
    static const size_t SEQUENCE = __COUNTER__;                                                                        \
                                                                                                                       \
  public:                                                                                                              \
    template <size_t Index>                                                                                            \
    using field_xml_accessor = field_xml_accessor_t<struct_type, Index>;

#define XL_XML_MEMBER_NODE(field_type, field_name)                                                                     \
public:                                                                                                                \
  field_type field_name;                                                                                               \
                                                                                                                       \
private:                                                                                                               \
  template <typename T>                                                                                                \
  struct field_xml_accessor_t<T, __COUNTER__ - SEQUENCE - 1> {                                                         \
    static bool read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      const ::rapidxml::xml_node<> *xml_node = parent.first_node(#field_name);                                         \
      if (xml_node != nullptr) {                                                                                       \
        return ::xl::xml_accessor<field_type>::read(ref.field_name, *xml_node);                                        \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool will_write(const Type &ref, unsigned int flags) {                                                      \
      return ::xl::xml_accessor<field_type>::will_write(ref.field_name, flags);                                        \
    }                                                                                                                  \
    static void write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      if (!will_write(ref, flags)) {                                                                                   \
        return;                                                                                                        \
      }                                                                                                                \
      ::rapidxml::xml_node<> *xml_node = parent.document()->allocate_node(::rapidxml::node_element, #field_name);      \
      parent.append_node(xml_node);                                                                                    \
      ::xl::xml_accessor<field_type>::write(ref.field_name, *xml_node, flags);                                         \
    }                                                                                                                  \
  };

#define XL_XML_MEMBER_ATTR(field_type, field_name)                                                                     \
public:                                                                                                                \
  field_type field_name;                                                                                               \
                                                                                                                       \
private:                                                                                                               \
  template <typename T>                                                                                                \
  struct field_xml_accessor_t<T, __COUNTER__ - SEQUENCE - 1> {                                                         \
    static bool read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      const ::rapidxml::xml_attribute<> *xml_attribute = parent.first_attribute(#field_name);                          \
      if (xml_attribute != nullptr) {                                                                                  \
        return ::xl::xml_accessor<field_type>::read(ref.field_name, *xml_attribute);                                   \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool will_write(const Type &ref, unsigned int flags) {                                                      \
      return ::xl::xml_accessor<field_type>::will_write(ref.field_name, flags);                                        \
    }                                                                                                                  \
    static void write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      if (!will_write(ref, flags)) {                                                                                   \
        return;                                                                                                        \
      }                                                                                                                \
      ::rapidxml::xml_attribute<> *xml_attribute = parent.document()->allocate_attribute(#field_name);                 \
      parent.append_attribute(xml_attribute);                                                                          \
      ::xl::xml_accessor<field_type>::write(ref.field_name, *xml_attribute, flags);                                    \
    }                                                                                                                  \
  };

#define XL_XML_END()                                                                                                   \
private:                                                                                                               \
  static const size_t FIELDS = __COUNTER__ - SEQUENCE - 1;                                                             \
  template <size_t Begin, size_t End>                                                                                  \
  struct fields_xml_accessor_walker {                                                                                  \
    static bool read(Type &ref, const ::rapidxml::xml_node<> &parent) {                                                \
      if (!field_xml_accessor<Begin>::read(ref, parent)) {                                                             \
        return false;                                                                                                  \
      }                                                                                                                \
      if (!fields_xml_accessor_walker<Begin + 1, End>::read(ref, parent)) {                                            \
        return false;                                                                                                  \
      }                                                                                                                \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool will_write(const Type &ref, unsigned int flags) {                                                      \
      if (field_xml_accessor<Begin>::will_write(ref, flags)) {                                                         \
        return true;                                                                                                   \
      }                                                                                                                \
      return fields_xml_accessor_walker<Begin + 1, End>::will_write(ref, flags);                                       \
    }                                                                                                                  \
    static void write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
      field_xml_accessor<Begin>::write(ref, parent, flags);                                                            \
      fields_xml_accessor_walker<Begin + 1, End>::write(ref, parent, flags);                                           \
    }                                                                                                                  \
  };                                                                                                                   \
  template <size_t Index>                                                                                              \
  struct fields_xml_accessor_walker<Index, Index> {                                                                    \
    static bool read(Type &ref, const ::rapidxml::xml_node<> &xml_node) {                                              \
      return true;                                                                                                     \
    }                                                                                                                  \
    static bool will_write(const Type &ref, unsigned int flags) {                                                      \
      return false;                                                                                                    \
    }                                                                                                                  \
    static void write(const Type &ref, ::rapidxml::xml_node<> &parent, unsigned int flags) {                           \
    }                                                                                                                  \
  };                                                                                                                   \
                                                                                                                       \
private:                                                                                                               \
  friend ::xl::xml_accessor<Type>;                                                                                     \
  bool xml_read(const ::rapidxml::xml_node<> &xml_node) {                                                              \
    return fields_xml_accessor_walker<0, FIELDS>::read(*this, xml_node);                                               \
  }                                                                                                                    \
  bool xml_will_write(unsigned int flags) const {                                                                      \
    return fields_xml_accessor_walker<0, FIELDS>::will_write(*this, flags);                                            \
  }                                                                                                                    \
  void xml_write(::rapidxml::xml_node<> &parent, unsigned int flags) const {                                           \
    fields_xml_accessor_walker<0, FIELDS>::write(*this, parent, flags);                                                \
  }                                                                                                                    \
                                                                                                                       \
public:                                                                                                                \
  bool xml_parse(const char *xml_string, const char *root_name) {                                                      \
    ::rapidxml::xml_document<> xml_document;                                                                           \
    try {                                                                                                              \
      xml_document.parse<::rapidxml::parse_non_destructive>((char *)xml_string);                                       \
    } catch (::rapidxml::parse_error &) {                                                                              \
      return false;                                                                                                    \
    }                                                                                                                  \
    ::rapidxml::xml_node<> *root = xml_document.first_node(root_name);                                                 \
    if (root == nullptr || !xml_read(*root)) {                                                                         \
      return false;                                                                                                    \
    }                                                                                                                  \
    return true;                                                                                                       \
  }                                                                                                                    \
  std::string xml_dump(const char *root_name, unsigned int flags = ::xl::xml::WRITE_FLAG_NONE) {                       \
    ::rapidxml::xml_document<> xml_document;                                                                           \
    ::rapidxml::xml_node<> *root = xml_document.allocate_node(::rapidxml::node_element, root_name);                    \
    xml_document.append_node(root);                                                                                    \
    xml_write(*root, flags);                                                                                           \
    std::string xml_string;                                                                                            \
    ::rapidxml::print(std::back_inserter(xml_string), xml_document,                                                    \
                      (flags & ::xl::xml::WRITE_FLAG_PRETTY) == 0 ? ::rapidxml::print_no_indenting : 0);               \
    return std::move(xml_string);                                                                                      \
  }                                                                                                                    \
  }                                                                                                                    \
  ;
