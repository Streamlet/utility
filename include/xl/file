#pragma once

#include "native_string"
#include <cstdio>
#include <functional>
#include <string>

#ifdef _WIN32
#define ftell _ftelli64
#define fseek _fseeki64
#else
#define _FILE_OFFSET_BITS 64
#define ftell ftello
#define fseek fseeko
#endif

#ifndef _WIN32
#include <sys/stat.h>
#include <unistd.h>
#endif

#ifdef _WIN32
#define XL_FS_SEP _T("\\")
#else
#define XL_FS_SEP _T("/")
#endif

namespace xl {

namespace file {

std::string read(const TCHAR *path);

std::string read_text_auto(const TCHAR *path);

std::string read_text_utf8_bom(const TCHAR *path);

std::wstring read_text_utf16_le(const TCHAR *path);

std::wstring read_text_utf16_be(const TCHAR *path);

bool write(const TCHAR *path, const std::string &text);

bool write_text_uft8_bom(const TCHAR *path, const std::string &text);

bool write_text_utf16_le(const TCHAR *path, const std::wstring &text);

bool write_text_utf16_be(const TCHAR *path, const std::wstring &text);

} // namespace file

namespace fs {

#ifdef _WIN32
const TCHAR SEP = _T('\\');
#else
const TCHAR SEP = _T('/');
#endif

bool touch(const TCHAR *path);

bool exists(const TCHAR *path);

long long size(const TCHAR *path);

bool unlink(const TCHAR *path);

bool mkdir(const TCHAR *path);

bool mkdirs(const TCHAR *path);

typedef std::function<bool(const native_string &path, bool is_dir)> EnumDirCallback;
bool enum_dir(const TCHAR *path, EnumDirCallback callback, bool recursive = false, bool sub_dir_first = false);

bool rmdir(const TCHAR *path);

bool remove(const TCHAR *path);

bool remove_all(const TCHAR *path);

bool rename(const TCHAR *path, const TCHAR *new_path);

} // namespace fs

} // namespace xl