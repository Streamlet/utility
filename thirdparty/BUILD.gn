import("../build_options.gni")

# boost

config("boost_public_config") {
  defines = [
    "BOOST_ALL_NO_LIB",
    "BOOST_AUTO_LINK_SYSTEM",
    "BOOST_DLL_USE_STD_FS",
    "BOOST_LOG_USE_STD_REGEX",
    "BOOST_PROCESS_USE_STD_FS",
  ]
  if (is_win && is_winxp) {
    defines += [
      "BOOST_USE_WINAPI_VERSION=$winver",
      "BOOST_SYSTEM_DISABLE_THREADS",
    ]
  }
  include_dirs = [ "boost" ]
  lib_dirs = [ "$target_gen_dir/boost/lib" ]
}

boost("boost") {
  boost_source_dir = "boost"
  boost_libraries = [ "program_options" ]
  boost_install_dir = "$target_gen_dir/boost"
  boost_layout = "system"
  if (is_win) {
    boost_outputs = [ "$target_gen_dir/boost/lib/libboost_program_options.lib" ]
  } else {
    boost_outputs = [ "$target_gen_dir/boost/lib/libboost_program_options.a" ]
  }

  public_configs = [ ":boost_public_config" ]
}

# openssl
# for posix: install openssl-devel before compiling
if (is_linux) {
  config("openssl_public_config") {
    cflags = [ "-Wno-deprecated-declarations" ]
  }
  group("openssl") {
    public_configs = [ ":openssl_public_config" ]
  }
} else if (is_win || is_mac) {
  config("openssl_public_config") {
    include_dirs = [ "$target_gen_dir/libressl/include" ]
    lib_dirs = [ "$target_gen_dir/libressl/lib" ]
    if (is_posix) {
      cflags = [ "-Wno-deprecated-declarations" ]
    }
    if (is_win) {
      libs = [ "ws2_32.lib" ]
    }
  }

  cmake("openssl") {
    cmake_root_dir = "libressl"
    cmake_options = [
      "LIBRESSL_APPS=OFF",
      "LIBRESSL_TESTS=OFF",
    ]
    if (static_link_crt) {
      cmake_options += [ "USE_STATIC_MSVC_RUNTIMES=ON" ]
    }
    cmake_install_dir = "$target_gen_dir/libressl"
    if (is_win) {
      cmake_outputs = [ "$target_gen_dir/libressl/lib/crypto-51.lib" ]
    } else {
      cmake_outputs = [ "$target_gen_dir/libressl/lib/libcrypto.a" ]
    }
    public_configs = [ ":openssl_public_config" ]
  }
}

# curl
# for posix: install libcurl-devel before compiling
if (is_linux || is_mac) {
  group("curl") {
  }
} else if (!is_win || !winhttp) {
  config("curl_public_config") {
    include_dirs = [ "$target_gen_dir/curl/include" ]
    lib_dirs = [ "$target_gen_dir/curl/lib" ]
    defines = []
    if (is_win && static_link_crt) {
      defines += [ "CURL_STATICLIB" ]
    }
    if (is_win) {
      libs = [ "crypt32.lib" ]
    } else if (is_mac) {
      libs = [ "crypto" ]
    }
  }

  cmake("curl") {
    cmake_root_dir = "curl"
    cmake_options = [
      "BUILD_CURL_EXE=OFF",
      "BUILD_SHARED_LIBS=OFF",
      "CURL_ENABLE_SSL=ON",
    ]
    if (is_win) {
      if (static_link_crt) {
        cmake_options += [ "CURL_STATIC_CRT=ON" ]
      }
      cmake_options += [
        "ENABLE_UNICODE=ON",
        "CURL_USE_SCHANNEL=ON",
        "CURL_WINDOWS_SSPI=ON",
      ]
    } else {
      cmake_options += [ "CURL_USE_OPENSSL=ON" ]
    }
    if (is_debug) {
      cmake_options += [
        "ENABLE_DEBUG=ON",
        "ENABLE_CURLDEBUG=ON",
      ]
    }
    cmake_install_dir = "$target_gen_dir/curl"
    cmake_outputs = [ "$target_gen_dir/curl/include/curl/curl.h" ]
    if (is_win) {
      if (is_debug) {
        cmake_outputs += [ "$target_gen_dir/curl/lib/libcurl-d.lib" ]
      } else {
        cmake_outputs += [ "$target_gen_dir/curl/lib/libcurl.lib" ]
      }
    } else {
      cmake_outputs += [ "$target_gen_dir/curl/lib/libcurl.a" ]
    }

    public_configs = [ ":curl_public_config" ]
  }
}

# zlibwrap

config("zlibwrap_public_config") {
  include_dirs = [ "ZLibWrap/include" ]
}

group("zlibwrap") {
  public_configs = [ ":zlibwrap_public_config" ]
  deps = [ "ZLibWrap/src:zlibwrap" ]
}
