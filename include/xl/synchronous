// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

//
// <condition_variable> and <mutex> are not supported on Windows XP
//

namespace xl {

class event {
public:
  event(bool init_signaled, bool auto_reset);
  ~event();

  void wait() const;
  bool timed_wait(unsigned long milliseconds) const;

  void set() const;
  void reset() const;

private:
  void *platform_context_ = nullptr;
};

class locker {
public:
  locker();
  ~locker();

  bool try_lock();
  void lock();
  void unlock();

private:
  event event_;
};

class lock_guard {
public:
  lock_guard(locker &locker);
  ~lock_guard();

private:
  locker &locker_;
};

} // namespace xl
