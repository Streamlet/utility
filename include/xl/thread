// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

//
// <thread> is not supported on Windows XP
//

#include <functional>

#ifdef _WIN32
#include <Windows.h>
#else
#include <pthread.h>
#endif

namespace xl {

class thread {
public:
  thread(std::function<void()> &&thread_routine);
  ~thread();

  thread(const thread &that) = delete;
  thread(thread &&that) = delete;
  thread &operator=(const thread &that) = delete;
  thread &operator=(thread &&that) = delete;

#ifdef _WIN32
  typedef HANDLE NATIVE_HANDLE_TYPE;
#else
  typedef pthread_t NATIVE_HANDLE_TYPE;
#endif

  NATIVE_HANDLE_TYPE native_handle() const;

  bool joinable() const;
  void join();
  void detach();

private:
#ifdef _WIN32
  static unsigned __stdcall run(void *context);
#else
  static void *run(void *context);
#endif

  NATIVE_HANDLE_TYPE handle_;
  std::function<void()> thread_routine_;
};

} // namespace xl