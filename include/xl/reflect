#pragma once

#include <map>
#include <string>
#include <typeinfo>

// gcc does not support explicit specialization in class scope,
// and does not support default template parameter in partitial specialization
// so here we add an extra template parameter 'typename T' at FieldT
// and make Field = FieldT<Type, Index> for using

#define XL_REFLECT_BEGIN(struct_type)                                                                                  \
  struct struct_type {                                                                                                 \
    template <typename T, size_t Index>                                                                                \
    struct FieldT;                                                                                                     \
    typedef struct_type Type;                                                                                          \
    static const size_t SEQUENCE = __COUNTER__;                                                                        \
    template <size_t Index>                                                                                            \
    using Field = FieldT<Type, Index>;

#define XL_REFLECT_MEMBER(field_type, field_name)                                                                      \
  field_type field_name;                                                                                               \
  static const size_t SEQUENCE_##field_name = __COUNTER__;                                                             \
  template <typename T>                                                                                                \
  struct FieldT<T, SEQUENCE_##field_name - SEQUENCE - 1> {                                                             \
    static const std::type_info &type() {                                                                              \
      return typeid(field_type);                                                                                       \
    }                                                                                                                  \
    static const char *name() {                                                                                        \
      return #field_name;                                                                                              \
    }                                                                                                                  \
    static size_t offset() {                                                                                           \
      return (size_t) & ((Type *)nullptr)->field_name;                                                                 \
    }                                                                                                                  \
    static size_t size() {                                                                                             \
      return sizeof(field_type);                                                                                       \
    }                                                                                                                  \
    static field_type &value(Type &ref) {                                                                              \
      return ref.field_name;                                                                                           \
    }                                                                                                                  \
  };

#define XL_REFLECT_END()                                                                                               \
  static const size_t FIELDS = __COUNTER__ - SEQUENCE - 1;                                                             \
  static size_t fields() {                                                                                             \
    return FIELDS;                                                                                                     \
  }                                                                                                                    \
  template <size_t Begin, size_t End>                                                                                  \
  struct FieldsWalker {                                                                                                \
    static const std::type_info &field_type(size_t index) {                                                            \
      if (index == Begin) {                                                                                            \
        return Field<Begin>::type();                                                                                   \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_type(index);                                                        \
      }                                                                                                                \
    }                                                                                                                  \
    static const char *field_name(size_t index) {                                                                      \
      if (index == Begin) {                                                                                            \
        return Field<Begin>::name();                                                                                   \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_name(index);                                                        \
      }                                                                                                                \
    }                                                                                                                  \
    static size_t field_index(const char *field_name) {                                                                \
      if (strcmp(Field<Begin>::name(), field_name) == 0) {                                                             \
        return Begin;                                                                                                  \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_index(field_name);                                                  \
      }                                                                                                                \
    }                                                                                                                  \
    static size_t field_index(const char *field_name, size_t length) {                                                 \
      if (strncmp(Field<Begin>::name(), field_name, length) == 0) {                                                    \
        return Begin;                                                                                                  \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_index(field_name, length);                                          \
      }                                                                                                                \
    }                                                                                                                  \
    static size_t field_offset(size_t index) {                                                                         \
      if (index == Begin) {                                                                                            \
        return Field<Begin>::offset();                                                                                 \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_offset(index);                                                      \
      }                                                                                                                \
    }                                                                                                                  \
    static size_t field_size(size_t index) {                                                                           \
      if (index == Begin) {                                                                                            \
        return Field<Begin>::size();                                                                                   \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_size(index);                                                        \
      }                                                                                                                \
    }                                                                                                                  \
    template <typename T>                                                                                              \
    static T &field_value(Type &ref, size_t index) {                                                                   \
      if (index == Begin) {                                                                                            \
        return (T &)Field<Begin>::value(ref);                                                                          \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::template field_value<T>(ref, index);                                      \
      }                                                                                                                \
    }                                                                                                                  \
    static void *field_data(Type &ref, size_t index) {                                                                 \
      if (index == Begin) {                                                                                            \
        return &Field<Begin>::value(ref);                                                                              \
      } else {                                                                                                         \
        return FieldsWalker<Begin + 1, End>::field_data(ref, index);                                                   \
      }                                                                                                                \
    }                                                                                                                  \
  };                                                                                                                   \
  template <size_t Index>                                                                                              \
  struct FieldsWalker<Index, Index> {                                                                                  \
    static const std::type_info &field_type(size_t index) {                                                            \
      return typeid(nullptr);                                                                                          \
    }                                                                                                                  \
    static const char *field_name(size_t index) {                                                                      \
      return nullptr;                                                                                                  \
    }                                                                                                                  \
    static size_t field_index(const char *field_name) {                                                                \
      return -1;                                                                                                       \
    }                                                                                                                  \
    static size_t field_index(const char *field_name, size_t length) {                                                 \
      return -1;                                                                                                       \
    }                                                                                                                  \
    static size_t field_offset(size_t index) {                                                                         \
      return -1;                                                                                                       \
    }                                                                                                                  \
    static size_t field_size(size_t index) {                                                                           \
      return -1;                                                                                                       \
    }                                                                                                                  \
    template <typename T>                                                                                              \
    static T &field_value(Type &ref, size_t index) {                                                                   \
      static T t;                                                                                                      \
      return t;                                                                                                        \
    }                                                                                                                  \
    static void *field_data(Type &ref, size_t index) {                                                                 \
      return nullptr;                                                                                                  \
    }                                                                                                                  \
  };                                                                                                                   \
  static const std::type_info &field_type(size_t index) {                                                              \
    return FieldsWalker<0, FIELDS>::field_type(index);                                                                 \
  }                                                                                                                    \
  static const char *field_name(size_t index) {                                                                        \
    return FieldsWalker<0, FIELDS>::field_name(index);                                                                 \
  }                                                                                                                    \
  static size_t field_index(const char *field_name) {                                                                  \
    return FieldsWalker<0, FIELDS>::field_index(field_name);                                                           \
  }                                                                                                                    \
  static size_t field_index(const char *field_name, size_t length) {                                                   \
    return FieldsWalker<0, FIELDS>::field_index(field_name, length);                                                   \
  }                                                                                                                    \
  static size_t field_offset(size_t index) {                                                                           \
    return FieldsWalker<0, FIELDS>::field_offset(index);                                                               \
  }                                                                                                                    \
  static size_t field_size(size_t index) {                                                                             \
    return FieldsWalker<0, FIELDS>::field_size(index);                                                                 \
  }                                                                                                                    \
  template <typename T>                                                                                                \
  T &field_value(size_t index) {                                                                                       \
    return FieldsWalker<0, FIELDS>::template field_value<T>(*this, index);                                             \
  }                                                                                                                    \
  void *field_data(size_t index) {                                                                                     \
    return FieldsWalker<0, FIELDS>::field_data(*this, index);                                                          \
  }                                                                                                                    \
  }                                                                                                                    \
  ;
