// MIT License
//
// Copyright (c) 2022 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "native_string"
#include <string>

namespace xl {

namespace encoding {

std::wstring utf8_to_utf16(const char *utf8, size_t length);
std::wstring utf8_to_utf16(const char *utf8);
std::wstring utf8_to_utf16(const std::string &utf8);

std::string utf16_to_utf8(const wchar_t *utf16, size_t length);
std::string utf16_to_utf8(const wchar_t *utf16);
std::string utf16_to_utf8(const std::wstring &utf16);

native_string utf8_to_native(const char *utf8, size_t length);
native_string utf8_to_native(const char *utf8);
native_string utf8_to_native(const std::string &utf8);

std::string native_to_utf8(const TCHAR *native, size_t length);
std::string native_to_utf8(const TCHAR *native);
std::string native_to_utf8(const native_string &native);

#ifdef _WIN32

std::wstring ansi_to_utf16(const char *ansi, size_t length);
std::wstring ansi_to_utf16(const char *ansi);
std::wstring ansi_to_utf16(const std::string &ansi);

std::string utf16_to_ansi(const wchar_t *ucs2, size_t length);
std::string utf16_to_ansi(const wchar_t *ucs2);
std::string utf16_to_ansi(const std::wstring &ucs2);

#endif

} // namespace encoding

} // namespace xl
