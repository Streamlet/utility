// Copyright (c) 2016 Streamlet (streamlet@outlook.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include <functional>

namespace xl {

class scope_guard_impl_base {
public:
  scope_guard_impl_base() : dismissed_(false) {
  }
  scope_guard_impl_base(scope_guard_impl_base &that) : dismissed_(that.dismissed_) {
    that.dismiss();
  }
  ~scope_guard_impl_base() {
  }

protected:
  template <typename J>
  static void static_execute(J &j) {
    if (!j.dismissed_) {
      j.execute();
    }
  }

public:
  void dismiss() const {
    dismissed_ = true;
  }

private:
  mutable bool dismissed_;
};

typedef const scope_guard_impl_base &scope_guard;

template <typename F>
class scope_guard_impl : public scope_guard_impl_base {
public:
  scope_guard_impl(F fn) : scope_guard_impl_base(), fn_(fn) {
  }
  scope_guard_impl(scope_guard_impl &&that) : scope_guard_impl_base(that), fn_(std::move(that.fn_)) {
  }
  ~scope_guard_impl() {
    static_execute(*this);
  }
  void execute() {
    fn_();
  }

private:
  F fn_;
};

template <typename F>
inline scope_guard_impl<F> make_guard(F f) {
  return scope_guard_impl<F>(f);
}
} // namespace xl

#define XL_BLOCK_EXIT_CONN_(s, t) s##t
#define XL_BLOCK_EXIT_CONN(s, t)  XL_BLOCK_EXIT_CONN_(s, t)
#define XL_ON_BLOCK_EXIT(...)                                                                                          \
  ::xl::scope_guard XL_BLOCK_EXIT_CONN(sg, __LINE__) = ::xl::make_guard(::std::bind(__VA_ARGS__))
